clc;
clear all;
close all;
set(0,'DefaultAxesFontSize',14,'DefaultAxesFontName','Times New Roman');

%%
nfft = 1024;

bitsPerSubCarrier = 4;    % 2: 4QAM, 4: 16QAM, 6: 64QAM, 8: 256QAM

%% 
subband_size_ufmc = 30;     %Задание количества поддиапазонов и их размера UFMC
num_subbands_ufmc = 20;
subbands_off_set_ufmc = nfft/2-subband_size_ufmc*num_subbands_ufmc/2;

inf_band_fofdm = subband_size_ufmc*num_subbands_ufmc;
pref_size = nfft/16; %Размер циклического префикса

toneOffset = 2.5;        % Избыточность полосы
L = nfft/2+1;            %Длина фильтра UFMC (нечетное)
half_filt = floor(L/2);
n = -half_filt:half_filt;

% Задание функции синк-фильтра
pb = sinc((inf_band_fofdm+2*toneOffset).*n./nfft);
w = (0.5*(1+cos(2*pi.*n/(L-1)))).^0.6;

% Нормировка клэффициентов
fnum = (pb.*w)/sum(pb.*w);

% задание объекта фильтра
filtTx = dsp.FIRFilter('Structure', 'Direct form symmetric', ...
    'Numerator', fnum);
filtRx = clone(filtTx);

%Пилоты
pilot = 0.707+0.707i;
komp = 1+1i;
Pilot_step = 6;
amount_of_pilots_ufmc = ceil(subband_size_ufmc/Pilot_step);     %Количество пилотов для UFMC
inf_sub_size_ufmc = subband_size_ufmc-amount_of_pilots_ufmc;
RSSc_ufmc(:,1) = 1:Pilot_step:Pilot_step*amount_of_pilots_ufmc;

amount_of_pilots_fofdm = ceil(inf_band_fofdm/Pilot_step);       %Количество пилотов для FOFDM
inf_sub_size_fofdm = inf_band_fofdm-amount_of_pilots_fofdm;
RSSc_fofdm(:,1) = 1:Pilot_step:Pilot_step*amount_of_pilots_fofdm;

amount_of_symbols = 1;     %Количество символов

big_source_ufmc = randi([0 1], bitsPerSubCarrier*inf_sub_size_ufmc*num_subbands_ufmc, amount_of_symbols);
big_source_fofdm = randi([0 1], bitsPerSubCarrier*inf_sub_size_fofdm, amount_of_symbols);

% Задание фильтра  UFMC
filterLen = 27;      % = Длина фильтра

slobeAtten = 40;     % Затухания боковых лепестков
prototypeFilter = chebwin(filterLen, slobeAtten);   %Филтра на основе окна Чебышева
prototypeFilter_back = 1.-prototypeFilter;


hFig1 = figure;
axis([-0.5 0.5 -100 10]);
hold on; 
grid on;

data = [];
filter_band_all = [];
place_of_pilots_ufmc = [];
place_of_inf_ufmc = [];
out_data_ufmc = [];
out_data_fofdm = [];

for amount_of_iterations = 1:1   %Количесвто итераций

  %% Канал
Channel = 3;
switch Channel
    case 1
        A = [-1 -1 -1 0 0 0 -3 -5 -7];
        tau = round([0 50 120 200 230 500 1600 2300 5000]*(10^-9)*(15000*nfft));
        Ah = 10.^(A/20);
	case 2
        A = [0 -1 -2 -3 -8 -17.2 -20.8];
        tau = round([0 30 70 90 110 190 410]*(10^-9)*(15000*nfft));
        Ah = 10.^(A/20);
    case 3
        A = [0 -1.5 -1.4 -3.6 -0.6 -9.1 -7 -12 -16.9];
        tau = round([0 30 150 310 370 710 1090 1730 2510]*(10^-9)*(15000*nfft));
        Ah = 10.^(A/20);
end

%формирование импульсной характеристики канала
h = zeros(nfft,1,1); %формирование  массива импульсной характеристики
for j=1:length(tau)
    h(1+tau(j)) = Ah(j)*exp(1i*2*pi*rand(1));
end
H = fft(h);  
    
schet=0;
awgn_mass = [];
for a=4:1:4                         %Диапазон шума

for m=1:amount_of_symbols
%%
for k=1:num_subbands_ufmc
    source_ufmc = big_source_ufmc(1+bitsPerSubCarrier*inf_sub_size_ufmc*(k-1):bitsPerSubCarrier*inf_sub_size_ufmc*k,m);
    out_mod_ufmc = qammod(source_ufmc, 2^bitsPerSubCarrier, 'InputType', 'bit', 'UnitAveragePower', true);

    % Задание UFMC символа
    offset_ufmc = subbands_off_set_ufmc+(k-1)*subband_size_ufmc; 
    s = 0;
    for i=1:length(out_mod_ufmc)+amount_of_pilots_ufmc

        if sum (i == RSSc_ufmc) == 0
            s=s+1;
            DataSc_ufmc(s,1) = i;
        end
    end    
    place_of_inf_ufmc = [place_of_inf_ufmc;DataSc_ufmc+subband_size_ufmc*(k-1)];
    place_of_pilots_ufmc = [place_of_pilots_ufmc;RSSc_ufmc+subband_size_ufmc*(k-1)];
    
    Mux_ufmc (DataSc_ufmc,1) = out_mod_ufmc;
    Mux_ufmc (RSSc_ufmc,1) = pilot;
    half = floor (length(Mux_ufmc)/2);
    UFMC_symb = [zeros(offset_ufmc,1);Mux_ufmc; zeros(nfft-offset_ufmc-subband_size_ufmc, 1)];

    ifftOut_ufmc = ifft(ifftshift(UFMC_symb));
    
    % Филтрация каждого поддиапазона
    bandFilter = prototypeFilter.*exp( 1i*2*pi*(0:filterLen-1)'/nfft*((k-1/2)*subband_size_ufmc+0.5+subbands_off_set_ufmc+nfft/2) ); 
    filter_band_all = [filter_band_all,bandFilter];
    filterOut = conv(bandFilter,ifftOut_ufmc);    % свертка
    filterOut1(k,:)= conv(bandFilter,ifftOut_ufmc);
  
 %   
    % Спектральная мощность
    [psd1,f] = periodogram(filterOut, rectwin(length(filterOut)), ...
                          nfft*2, 1, 'centered'); 
    plot(f,10*log10(psd1)); 
    hold on;
    grid on;
xlabel('Нормированная частота')
ylabel('Спектральная плотность мощности (дБВт/Гц')
   
end

out_trans_matr = sum(filterOut1);
out_trans_ufmc = reshape(out_trans_matr,length(filterOut),1);

%% FOFDM

source_fofdm = big_source_fofdm(1:bitsPerSubCarrier*inf_sub_size_fofdm,m);
out_mod_fofdm = qammod(source_fofdm, 2^bitsPerSubCarrier, 'InputType', 'bit', 'UnitAveragePower', true);

    s = 0;
    for i=1:length(out_mod_fofdm)+amount_of_pilots_fofdm

        if sum (i == RSSc_fofdm) == 0
            s=s+1;
            DataSc_fofdm(s,1) = i;
        end
    end    
    
    Mux_fofdm (DataSc_fofdm,1) = out_mod_fofdm;
    Mux_fofdm (RSSc_fofdm,1) = pilot;
    
offset_fofdm = (nfft-inf_band_fofdm)/2; % for band center
symbolsInOFDM = [zeros(offset_fofdm,1); Mux_fofdm; zeros(nfft-offset_fofdm-inf_band_fofdm,1)];
ifftOut_fofdm = ifft(ifftshift(symbolsInOFDM));     

% Добавление циклического префикса
txSigOFDM = [ifftOut_fofdm(end-pref_size+1:end); ifftOut_fofdm];

% Фильтрация с нулевым заполнением
txSigFOFDM = filtTx([txSigOFDM; zeros(L-1,1)]);

%{
txSigOFDM = txSigOFDM./max(txSigOFDM);
out_trans_ufmc = out_trans_ufmc./max(out_trans_ufmc);
txSigFOFDM = txSigFOFDM./max(txSigFOFDM);
% Plot power spectral density (PSD) for OFDM signal
[psd3,f] = periodogram(txSigOFDM, rectwin(length(txSigOFDM)), nfft*2, ...
    1, 'centered');
plot(f,10*log10(psd3));
xlabel('Нормированная частота')
ylabel('Спектральная плотность мощности (дБВт/Гц')

    % Спектральная мощность
    [psd1,f] = periodogram(out_trans_ufmc, rectwin(length(out_trans_ufmc)), ...
                          nfft*2, 1, 'centered'); 
    plot(f,10*log10(psd1)); 
    hold on;
    grid on;
xlabel('Нормированная частота')
ylabel('Спектральная плотность мощности (дБВт/Гц')

% Plot power spectral density (PSD)
[psd2,f] = periodogram(txSigFOFDM, rectwin(length(txSigFOFDM)), nfft*2, 1, 'centered');
 plot(f,10*log10(psd2));
hold on;
grid on;
xlabel('Нормированная частота')
ylabel('Спектральная плотность мощности (дБВт/Гц')
legend('OFDM','UFMC','F-OFDM')
%}

%Пик-фактор

% Compute peak-to-average-power ratio (PAPR)
PAPR1 = comm.CCDF('PAPROutputPort', true, 'PowerUnits', 'dBW');
[~,~,paprFOFDM] = PAPR1(txSigFOFDM);
disp(['Peak-to-Average-Power-Ratio for F-OFDM = ' num2str(paprFOFDM) ' dB']);

% Compute peak-to-average-power ratio (PAPR)
PAPR2 = comm.CCDF('PAPROutputPort', true, 'PowerUnits', 'dBW');
[~,~,paprUFMC] = PAPR2(out_trans_ufmc);
disp(['Peak-to-Average-Power-Ratio (PAPR) for UFMC = ' num2str(paprUFMC) ' dB']);

%% 
%Обратная функция фильтра UFMC
rxf = [prototypeFilter.*exp(1i*2*pi*0.5*(0:filterLen-1)'/nfft); zeros(nfft-filterLen,1)];
prototypeFilterFreq = fftshift(fft(rxf));
prototypeFilterInv = 1./prototypeFilterFreq(nfft/2-subband_size_ufmc/2+(1:subband_size_ufmc));

%% 
channel_out_ufmc = conv (out_trans_ufmc,h);
channel_out_ufmc = channel_out_ufmc(1:length(out_trans_ufmc));

channel_out_fofdm = conv (txSigFOFDM,h);
channel_out_fofdm = channel_out_fofdm(1:length(txSigFOFDM));

%% awgn
with_awgn_ufmc = awgn(channel_out_ufmc,a,'measured');
with_awgn_fofdm = awgn(channel_out_fofdm,a,'measured');

%% UFMC
yRxPadded_ufmc = [with_awgn_ufmc; zeros(2*nfft-length(with_awgn_ufmc),1)];
RxSymbols2x_ufmc = fftshift(fft(yRxPadded_ufmc));
RxSymbols_ufmc = RxSymbols2x_ufmc(1:2:end);
dataRxSymbols_ufmc = RxSymbols_ufmc(subbands_off_set_ufmc+(1:num_subbands_ufmc*subband_size_ufmc));

% Эквалайзирование каждой поднесущей с использованием обратной
% характеристики фильтра
dataRxSymbolsMat_ufmc = reshape(dataRxSymbols_ufmc,subband_size_ufmc,num_subbands_ufmc);
EqualizedRxSymbolsMat_ufmc = bsxfun(@times,dataRxSymbolsMat_ufmc,prototypeFilterInv);
EqualizedRxSymbols_ufmc = EqualizedRxSymbolsMat_ufmc(:);

%Нахождение АЧХ канала
RSRx_ufmc = EqualizedRxSymbols_ufmc(place_of_pilots_ufmc); %Опорные поднесущие с искажениями
Hw_ufmc = RSRx_ufmc./pilot;

F_ufmc = griddedInterpolant(place_of_pilots_ufmc,Hw_ufmc,'cubic');
xq_ufmc = linspace(1,length(EqualizedRxSymbols_ufmc),length(EqualizedRxSymbols_ufmc));
vq_ufmc = F_ufmc(xq_ufmc);
in_eq_ufmc = reshape(vq_ufmc,length(EqualizedRxSymbols_ufmc),1);

%Эквалайзирование
InfoSpectrumRxEq_ufmc = EqualizedRxSymbols_ufmc./in_eq_ufmc; 

%Выделение поднесущих с данными 
in_dem_ufmc = InfoSpectrumRxEq_ufmc(place_of_inf_ufmc);
out_demod_ufmc = qamdemod(in_dem_ufmc, 2^bitsPerSubCarrier, 'OutputType', 'bit', 'UnitAveragePower', true);

%% FOFDM
% Приемник OFDM
rxSigFilt_fofdm = filtRx(with_awgn_fofdm);

% Устранение задержки фльтра
rxSigFiltSync_fofdm = rxSigFilt_fofdm(L:end);

% Удаление циклического префикса
rxSymbol_fofdm = rxSigFiltSync_fofdm(pref_size+1:end);

% Примое Фурье
RxSymbols_fofdm = fftshift(fft(rxSymbol_fofdm));

% Выделение информационных поднесущих
dataRxSymbols_fofdm = RxSymbols_fofdm(offset_fofdm+(1:inf_band_fofdm));

%Нахождение АЧХ канала
RSRx_fofdm = dataRxSymbols_fofdm(RSSc_fofdm); %Опорные поднесущие с искажениями
Hw_fofdm = RSRx_fofdm./pilot;

F_fofdm = griddedInterpolant(RSSc_fofdm,Hw_fofdm,'cubic');
xq_fofdm = linspace(1,length(dataRxSymbols_fofdm),length(dataRxSymbols_fofdm));
vq_fofdm = F_fofdm(xq_fofdm);
in_eq_fofdm = reshape(vq_fofdm,length(dataRxSymbols_fofdm),1);

%Эквалайзирование
InfoSpectrumRxEq_fofdm = dataRxSymbols_fofdm./in_eq_fofdm; 

%Выделение поднесущих с данными 
ModSymbRx_fofdm = InfoSpectrumRxEq_fofdm(DataSc_fofdm);

% Демодулятор 
out_demod_fofdm = qamdemod(ModSymbRx_fofdm, 2^bitsPerSubCarrier, 'OutputType', 'bit', 'UnitAveragePower', true);

%% 

place_of_inf_ufmc = [];
place_of_pilots_ufmc = [];
out_data_ufmc = [out_data_ufmc,out_demod_ufmc];

place_of_inf_fofdm = [];
place_of_pilots_fofdm = [];
out_data_fofdm = [out_data_fofdm,out_demod_fofdm];
filter_band_all =[];
filterOut1 = [];

end
%BER
schet = schet+1;
BER_ufmc(schet) = (biterr(out_data_ufmc, big_source_ufmc));
BER_fofdm(schet) = (biterr(out_data_fofdm, big_source_fofdm));
K_ufmc = BER_ufmc/(bitsPerSubCarrier*inf_sub_size_ufmc*num_subbands_ufmc*amount_of_symbols);
K_fofdm = BER_fofdm./(bitsPerSubCarrier*inf_sub_size_fofdm*amount_of_symbols);
out_data_ufmc = [];
out_data_fofdm = [];
awgn_mass = [awgn_mass;a];
end
%Общие массивы BER
big_bear_ufmc(amount_of_iterations,:) = K_ufmc;
big_bear_fofdm(amount_of_iterations,:) = K_fofdm;

disp(['Номер итерации = ' num2str(amount_of_iterations)]);
end

%{
%%Графики 
figure,plot(abs(RxSymbols_ufmc))
grid on;
title ('Сигнал после прямого Фурье ')
xlim ([0 length(filterOut)])
xlabel('Номер поднесущей')
ylabel('Величина по модулю')

figure,plot(abs(dataRxSymbols_ufmc))
grid on;
title ('Сигнал после удаления заполняющих крайних поднесущих')
xlim ([0 length(dataRxSymbols_ufmc)])
xlabel('Номер поднесущей')
ylabel('Величина по модулю')

figure,plot(abs(ifftOut_ufmc))
grid on;
title (['Спектр сигнала ' num2str(num_subbands_ufmc) '-го поддиапазона после ОБПФ'])
xlim ([0 length(ifftOut_ufmc)])
xlabel('Номер поднесущей')
ylabel('Величина по модулю')

figure,plot(abs(filterOut))
grid on;
title (['Спектр сигнала ' num2str(num_subbands_ufmc) '-го поддиапазона после фильтрации'])
xlim ([0 length(filterOut)])
xlabel('Номер поднесущей')
ylabel('Величина по модулю')

figure, plot (abs(Hw_ufmc))
grid on;
title ('Оценка функции канала передачи')
xlim ([1 length(Hw_ufmc)])
xlabel('Номер пилота')
ylabel('Величина по модулю')

figure, plot (abs(EqualizedRxSymbols_ufmc))
grid on;
title ('Сигнал после первого эквалайзирования')
xlabel('Номер пилота')
ylabel('Величина по модулю')

figure, plot (abs(dataRxSymbols_ufmc))
grid on;
title ('Сигнал без первого эквалайзирования')
xlabel('Номер пилота')
ylabel('Величина по модулю')

figure, semilogy (awgn_mass, K_fofdm)
hold on
semilogy (awgn_mass, K_ufmc)
hold off
grid on;
legend('F-OFDM','UFMC')
title ('Зависимость коэффициента ошибок от отношения сигнал шум')
xlabel('Отношение сигнал/шум, дБ')
ylabel('Коэффициент ошибок')

figure,plot(abs(in_dem_ufmc))
%}
